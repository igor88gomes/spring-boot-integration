# .github/workflows/docker-publish.yaml
name: Publish Docker image

on:
  # Publicera ENDAST när kod pushas till main
  push:
    branches:
      - main
  # Möjlighet att köra manuellt vid behov
  # workflow_dispatch:

env:
  # Imagenamn för publicering till Docker Hub (publik)
  IMAGE_NAME: docker.io/igor88gomes/spring-boot-integration

jobs:
  publish:
    name: Bygg, skanna och publicera
    runs-on: ubuntu-latest

    # Krävs för att kunna pusha till GHCR med GITHUB_TOKEN
    permissions:
      contents: read
      packages: write

    steps:
      # Checka ut koden
      - name: Checkout
        uses: actions/checkout@v4

      # Buildx: behåll alltid – krävs för cache (GHA), SBOM/provenance och promotion via `imagetools`.
      # Buildx: cache (GHA), SBOM/provenance, imagetools. Bra för alla builds.
      - name: Ställ in Buildx
        uses: docker/setup-buildx-action@v3

      # QEMU (valfritt): multi-arch (amd64+arm64, inkl. macOS M1/M2). Långsammare.
      # Ta bort detta steg OCH `platforms:` för snabbare amd64-only.
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      # Vars: kort commit-SHA (7 tecken) för taggnamn/loggar
      - name: Vars (kort SHA)
        id: vars
        shell: bash
        run: echo "short_sha=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          
          # Vars: GHCR owner i lowercase (krävs av GHCR)
               - name: Vars (GHCR owner lowercase)
               id: ghcr_owner
               shell: bash
               run: echo "owner_lc=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"

      # Docker-metadata: etiketter (OCI) + håll endast :latest som publik tagg
      - name: Metadata för Docker-image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=spring-boot-integration
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      # Logga in i Docker Hub (publikt register)
      - name: Logga in i Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # Logga in i GHCR (privat staging)
      - name: Logga in i GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # Bygg & pusha KANDIDAT till GHCR (privat) + bevara digest
      - name: Bygg & pusha kandidat (GHCR, privat)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          # Multi-arch (kan tas bort om du inte behöver arm64)
          platforms: linux/amd64,linux/arm64
          # Kandidattagg i GHCR – läsbar via kort SHA
          tags: ghcr.io/${{ steps.ghcr_owner.outputs.owner_lc }}/spring-boot-integration:candidate-${{ steps.vars.outputs.short_sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # GitHub cache för snabbare inkrementella builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Supply chain: attestation + SBOM
          provenance: true
          sbom: true

      # Sårbarhetsscan av kandidaten (stoppar om CRITICAL/HIGH med fix)
      - name: Trivy scan (kandidat)
        uses: aquasecurity/trivy-action@v0.33.0
        with:
          # Skanna EXAKT det som byggdes (via digest)
          image-ref: ghcr.io/${{ steps.ghcr_owner.outputs.owner_lc }}/spring-boot-integration@${{ steps.build.outputs.digest }}
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          format: 'table'
          timeout: '5m'
          exit-code: '1'   # pipeline stoppar vid blockerande CVEs

      # Främja EXAKT samma artefakt (digest) till :latest i Docker Hub
      - name: Främja kandidat till :latest (Docker Hub)
        run: |
          docker buildx imagetools create \
            --tag ${{ env.IMAGE_NAME }}:latest \
            ghcr.io/${{ steps.ghcr_owner.outputs.owner_lc }}/spring-boot-integration@${{ steps.build.outputs.digest }}
